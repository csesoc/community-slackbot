{
  "COMP1000": "World wide web(WWW) dependent activities have become an essential part of our existence and yet many of us do not know much about how they works. In the first part of this course, we introduce the abstract features of the internet and the software that makes it so powerful. Knowledge about the architecture of the internet, world wide web, browsers, search engines, e-commerce, security, etc. will be helpful in using the internet more effectively as well as becoming aware of the several pifalls associated with this modern technology.\n\nSpreadsheets and databases are two of the most commonly used and powerful computer tools yet they are often poorly utilised and the reasons for using one rather than the other are poorly understood. Many people purchase Microsoft Office which comes bundled with Microsoft Excel and Microsoft Access - a spreadsheet and a database application - yet while many people have some familiarity with Microsoft Excel, Microsoft Access is rarely utilised. This course aims to explain in straightforward terms the concepts underlying both of these powerful pieces of software so that students can exploit them effectively for both their studies and future careers. It will investigate how to design and implement effective spreadsheet and database applications. Students should also be able to transfer these skills to other, similar spreadsheet and database packages. Students will be expected to have personal copies of Microsoft Excel and Microsoft Access on their own computers.\n\n",
  "COMP1511": "An introduction to problem-solving via programming, which aims to have students develop proficiency in using a high level programming language. Topics: algorithms, program structures (statements, sequence, selection, iteration, functions), data types (numeric, character), data structures (arrays, tuples, pointers, lists), storage structures (memory, addresses), introduction to analysis of algorithms, testing, code quality, teamwork, and reflective practice. The course includes extensive practical work in labs and programming projects.\n\nAdditional Information\n\nThis course should be taken by all CSE majors, and any other students who have an interest in computing or who wish to be extended. It does not require any prior computing knowledge or experience.\n\nCOMP1511 leads on to COMP1521, COMP1531, COMP2511 and COMP2521, which form the core of the study of computing at UNSW and which are pre-requisites for the full range of further computing courses.\n\nDue to overlapping material, students who complete COMP1511 may not also enrol in COMP1911 or COMP1921. ",
  "COMP2111": "This course introduces rigorous and formal methods for modelling system behaviour. These methods support the modelling of abstract specifications and the refinement of abstract specifications through to concrete implementations. Consistency of formal development is verified by proof obligations and formal proof. The course will cover: specification, refinement, implementation, proof obligations, and proof. It re-inforces, and builds on, prerequisite knowledge from MATH1081, especially set theory and predicate logic. The course will use case-studies and assignments to develop competence. The methods developed in this course are used in the SENG2011 workshops and in safety-critical industrial contexts.",
  "COMP2511": "This course aims to introduce students to the principles of object-oriented design and to fundamental techniques in object-oriented programming. It is typically taken in the second year of study, after COMP2521, to ensure an appropriate background in data structures. The knowledge gained in COMP2511 is useful in a wide range of later-year CS courses.\n\nThe goal of the course is to expose students to:\n\nTopics:\nObjects. Object-oriented design. Design patterns. Design by contract. Object-oriented programming in Java. Practical work: labs, design project, implementation project.",
  "COMP3131": "Covers the fundamental principles in programming languages and implementation techniques for compilers (emphasis on compiler front ends). Course contents include: program syntax and semantics, formal translation of programming languages, finite-state recognisers and regular expressions, context-free parsing techniques such as LL(k( and LR(k), attribute grammars, syntax-directed translation, type checking and code generation. Lab: implementation of a compiler in a modern programming language for a small programming language.",
  "COMP3151": "Concurrency = processes + communication. Communication via shared variables vs message passing. Models of concurrency: true concurrency vs interleaving. Abstractions: atomicity, locks and barriers, semaphores, monitors, threads, RPC, rendezvous. Classical problems: mutual exclusion, dining philosophers, sleeping barber, termination detection, gravitational N-body problem.Practical work: programming assignments and proving of program safety and liveness properties.",
  "COMP3311": "Data models: entity-relationship, relational, object-oriented. Relational database management systems: data definition, query languages, development tools. Database application design and implementation. Architecture of relational database management systems: storage management, query processing, transaction processing. Lab: design and implementation of a database application.",
  "COMP3601": "Embedded system design team projects. Embedded system design life cycle. Software/hardware codesign. Hardware slection process. Software development techniques. Hardware/software integration and system testing. Ethics in teams, ethics in design, IP protection, IP reuse, project report writing. Project and team management.",
  "COMP4121": "This course is a continuation of our introductory algorithms courses COMP3121/3821/9101/9801. We will cover some randomized algorithms and data structures, such as randomized hashing, skiplists, order statistics and Karger's randomized Min Cut algorithm. We will then look at the Markov chains and the Google PageRank algorithm, Hidden Markov Models and the Viterbi Algorithm, and then cover in quite a detail a variety of other algorithms important to the present day practice, including some of the most important algorithms used in Data Science.",
  "COMP4141": "Computability: formal languages and problems, Turing Machines (TMs), computability, (semi-)decidability, universal TMs, Church-Turing thesis, halting problem, reduction and undecidability proofs, examples; Complexity: run time, space, complexity classes, non-determinism and NP, polynomial reductions and NP completeness, optimisation problems and approximation, randomisation; Languages and Automata: regular expressions and languages, finite automata, determinisation, context-free grammars and languages (CFLs), Chomsky normal form, word problems, pumping lemma, push-down automata, decidability problems for CFLs; Semantics and Correctness: while programs, assertions and program correctness, Hoare logic, loops and loop invariants, relative completeness of Hoare logic (and its role in a proof of G\u00f6del's incompleteness result)",
  "COMP4337": "With exponential growth of the Internet, security of a network has become increasingly challenging. This subject will explore the security vulnerabilities in both fixed and wireless networks and cover the fundamental concepts and advanced issues with an emphasis on the Internet architecture and protocols.\n\nThe following key concepts will be covered: Wireless Communications and Security overview, Review of Cryptographic techniques, 802.11 Technologies and legacy 802.11 Security: lessons learnt, Encryption Ciphers and Methods in Wireless Networks, Wireless Security Risks, Wireless Security Auditing and Pen Test Introduction,  IPSec and IP layer security,  PKI/X.509, Transport Layer Security/DTLS,   Intrusion Detection and Protection Systems, Network Firewalls, Secure Neighbor Discovery, Routing and Forwarding Security,  Authentication and Key Management in Wireless Networks/Sensor Networks,   Broadcast Security and Secure Code Dissemination,  Network Privacy and Anonymity, Security and Privacy in Location Services, Smart Grid and IoT security.",
  "COMP4511": "This course is a project-based course designed to build on the basic skills acquired in COMP3511 \u2013 Human Computer Interaction. The course addresses the skills and knowledge required in industry to brainstorm, design, implement, and evaluate an application through the user-centred design process. Because this is an iterative process, students will be required to build their interface at least three times, starting with a low-fidelity prototype and building to high-fidelity and more complete prototypes. By the end of the course, students should have a solid understanding of the importance of user-centred design and how it is applied in the industry to design, test and build a functioning application.\n\nThe course is built to reflect up-to-date industry practice and methods. You would have benefitted from also completing COMP2911, which introduces you to object-oriented techniques, UML and design patterns. Whilst you will be coding in this course to build an iteration of your application, this is not the focus of the course, which remains on design practices and testing of graphical user interfaces. ",
  "COMP4930": "Thesis part A and B are done in the last two semesters of the BE degree program or during the two semesters of the CS Honours program. Students undertake directed laboratory and research work on an approved topic under the guidance of members of the academic staff. Usually, the Thesis involves the design and construction of experimental apparatus and/or software, together with appropriate testing and evaluation. For Part A, students are required to present a seminar and deliver a preliminary project report. For Part B, a written thesis describing the entire project must be submitted.",
  "COMP4941": "This course in conjunction with Thesis part A (COMP4930) constitutes an 18 UoC advanced thesis option for excellent students and is suitable for those students desiring a more intensive research experience. The advanced thesis option may describe a higher level directed research work on an approved topic.\n\nAdvanced thesis students must submit a draft manuscript for submission to a scientific conference or journal appropriate for the discipline along with their final thesis report.\n\n",
  "COMP6441": "Introduction to computer security, prevention of cybercrime and cyberterror. The principles of engineering secure systems. How to think like a security engineer.\n\nEngineering secure systems. How security fails. Security analysis and design. Private and public cryptographic protocols. Introduction to information security: Confidentiality, Integrity, Authentication, Non-repudiation, hashing, signatures, bits of security. Physical security, social engineering, sniffing, intrusion detection, prevention and response, firewalls, honeypots. Overview of vulnerabilities and exploits including areas such as buffer overflow, inter overflow, heap attacks, Return-Oriented-Programming, heap attacks. Principles of risk and security. Case studies drawn from the history of hacking and from current events.\n\nAdditional topics drawn from recent developments and current research in applied computer security.\n\nThere are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities. These do not directly contribute to your final grade but are expected to be used to provide evidence of your capabilities in your portfolio.\n\nA programming background is not required but it will be helpful in some of the more applied topics. Students need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self-directed learners.",
  "COMP6445": "This course addresses the skills and knowledge needed by first responders to a discovered cyber breech, as well as law enforcement and criminal justice.\n\nThis course covers both forensic theory / professional practice, and looking at the underlying engineering of hiding, finding, interpreting and responding to traces. Students will use of standard forensic tools to extract carve and analyse data as well as learning the low level technical skills and knowledge underlying them. By the end of the course students should be able to write and analyse simple forensic tools as well as being able to use them.\n\nThe course covers Memory Forensics, Disc Forensics Network, Device Forensics, Stealth Techniques, Anti-forensics, Professional Forensic Practice, (chain of custody, records etc), Logging. Course coverage will be constantly updated over time to reflect emerging forensic practice and methods.",
}